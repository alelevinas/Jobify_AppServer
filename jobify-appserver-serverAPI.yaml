# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Jobify - AppServer Server API
  description: API para el App server de Jobify
  version: "1.0.0"
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /
consumes:
  - application/json
produces:
  - application/json
paths:
  /login:
    get:
      summary: User log in. Basic authorization through header.
      description: |
        El *login* endpoint devuelve un token para poder acceder al resto de la API.
      parameters:
        - name: token
          in: header
          description: Basic Authorization
          required: true
          type: string
      tags:
        - Acces
      responses:
        200:
          description: Un token
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                $ref: '#/definitions/Token'
          examples:
            application/json:
              status: succes
              data:
                token: "67E72E2FB07E8D4427FCBA609525ED57"
        401:
          description: "Invalid password or user"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 401
                message: "Invalid password or user"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
  /signup:
    post:
      summary: Register a new user
      description: |
        El *signup* endpoint recibe un user con sus datos. Los únicos obligatorios son email y password en Basic Authorization (header). El resto son optativos. Devuelve un *token* para seguir utilizando la API o un código de *error*. 
      parameters:
        - name: Auth
          in: header
          description: Basic Authorization email:password in b64
          required: true
          type: string
          
        - name: user
          description: Usuario a dar de alta
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: First and last name of the user.
              gender:
                type: string
                description: Gender of the user
              dob:
                type: string
                description: Date of birht of the user
              nationality:
                type: string
                description: Nationality of the user
              city:
                type: string
                description: Vity of the user
              profile:
                type: string
                description: Breve resumen of the user
              picture:
                type: string
                description: Image URL of the user.
      
      tags:
        - Acces
      responses:
        200:
          description: A new token for that User
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                $ref: '#/definitions/Token'
          examples:
            application/json:
              status: succes
              data:
                token: "67E72E2FB07E8D4427FCBA609525ED57"
        409:
          description: Email already in use
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 409
                message: "Email already in use"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
  
  /users:
    get:
      summary: Users Profiles
      description: The *users* Profile endpoint returns information about all the users within the application.
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
          
      tags:
        - User
      responses:
        200:
          description: Profile information for every user
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
  
  
  /users/me:
    get:
      summary: User Profile
      description: The *user/me* Profile endpoint returns information about the user with authorization in the application.
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
      tags:
        - User
      responses:
        200:
          description: Profile information for every user
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                $ref: '#/definitions/User'
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
    post:
      summary: Update user
      description: The *users/me* Profile POST endopoint updates the authorized users information
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
          
        - name: user
          description: Usuario a actualizar
          in: body
          schema:
            $ref: '#/definitions/User'
      tags:
        - User
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  data:
                    type: string
                    description: ok
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
    delete:
      summary: Delete User Profile
      description: The *user/me* Profile DELETE endpoint deletes the user with authorization in the application.
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
      tags:
        - User
      responses:
        200:
          description: Profile deleted
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  data:
                    type: string
                    description: ok
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
  /users/recommend:
    post:
      summary: Recommend user
      description: The */users/recommend*  POST endopoint marks a user recommended_by the user who hits this endopint
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
          
        - name: username
          description: User to recommend
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
      tags:
        - Recommend
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  data:
                    type: string
                    description: ok
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
    delete:
      summary: Stop recommending user
      description: The */users/recommend*  DELETE endopoint makes the user who hits this endopint stops recommending the destinatary user in the body.
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
          
        - name: username
          description: User to recommend
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
      tags:
        - Recommend
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  data:
                    type: string
                    description: ok
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
  /chats:
    get:
      summary: Get all profiles of users currently chatting with
      description: It returns a list of the profiles of the users that have a chat with the user that makes the request
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
          
      tags:
        - Chats
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/User'
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
  /chats?username=userid:
    get:
      summary: Get the chat with the userid especified
      description: It returns the messages of the Conversation beetween the user that makes the request and the userid especified
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
        - name: username
          in: url
          description: username received in the url parameter
          required: true
          type: string
          
      tags:
        - Chats
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/Messages'
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
    post:
      summary: Send a message from userid to another user
      description: It sends a message from the user that makes the request to the user especified in the url parameter
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
        - name: username
          in: url
          description: username received in the url parameter
          required: true
          type: string
          
      tags:
        - Chats
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
    delete:
      summary: Delete Chats with user especified
      description: The */chats* DELETE endpoint deletes the user especified in the url parameter
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
        - name: username
          in: url
          description: username received in the url parameter
          required: true
          type: string
      tags:
        - Chats
      responses:
        200:
          description: Conversation deleted
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
                properties:
                  data:
                    type: string
                    description: ok
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
  /messages:
    delete:
      summary: Deletes an only message
      description: Deletes a simple message especified by the id. That message has to be in a conversation of the user that makes the request.
      parameters:
        - name: Token
          in: header
          description: token received in login or signup
          required: true
          type: string
        - name: messageID
          in: body
          description: id of the message
          required: true
          type: string
          
      tags:
        - Messages
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              status:
                type: string
        501:
          description: Invalid Token
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 501
                message: Invalid Token
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              status:
                type: string
              error:
                $ref: '#/definitions/Error'
          examples:
            application/json:
              status: error
              error:
                code: 500
                message: Internal server error

definitions:
  Token:
    type: object
    properties:
      token:
        type: string
        description: Eg. "67E72E2FB07E8D4427FCBA609525ED57"
  User:
    type: object
    properties:
      email:
        type: string
        description: Email address of the user
      name:
        type: string
        description: First and last name of the user.
      gender:
        type: string
        description: Gender of the user
      dob:
        type: string
        description: Date of birht of the user
      nationality:
        type: string
        description: Nationality of the user
      city:
        type: string
        description: Vity of the user
      profile:
        type: string
        description: Breve resumen of the user
      picture:
        type: string
        description: Image URL of the user.
      contacts:
        type: array
        items:
          type: object
          properties:
            email:
              type: string
      recommended_by:
        type: array
        items:
          type: object
          properties:
            email:
              type: string
      skills:
        type: array
        items:
          $ref: '#/definitions/Skill'
      previous_exp:
        type: array
        items:
          $ref: '#/definitions/Job'
  Job:
    type: object
    properties:
      company:
        type: string
        description: Company
      description:
        type: string
        description: Descripción
      position:
        $ref: '#/definitions/JobPosition'
      years:
        type: string
        description: Interval of that job
  JobPosition:
    type: object
    properties:
      name:
        type: string
        description: Nombre
      category:
        type: string
        description: Categoría
      description:
        type: string
        description: Descripción
  Skill:
    type: object
    properties:
      name:
        type: string
        description: Nombre
      category:
        type: string
        description: Categoría
      description:
        type: string
        description: Descripción
  Category:
    type: object
    properties:
      name:
        type: string
        description: Nombre
      description:
        description: Descripción
        type: string

  Messages:
    type: object
    properties:
      id:
        type: int
        description: Identifier
      text:
        description: Text
        type: string
      author:
        description: Author of message
        type: string

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
