.TH "el::base::utils::Registry< T_Ptr, T_Key >" 3 "Wed Dec 7 2016" "Version 1.0.0" "Jobify" \" -*- nroff -*-
.ad l
.nh
.SH NAME
el::base::utils::Registry< T_Ptr, T_Key > \- A pointer registry mechanism to manage memory and provide search functionalities\&. (non-predicate version)  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <easylogging++\&.h>\fP
.PP
Inherits \fBel::base::utils::AbstractRegistry< T_Ptr, std::map< T_Key, T_Ptr * > >\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBRegistry\fP< T_Ptr, T_Key >::iterator \fBiterator\fP"
.br
.ti -1c
.RI "typedef \fBRegistry\fP< T_Ptr, T_Key >::const_iterator \fBconst_iterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegistry\fP (const \fBRegistry\fP &sr)"
.br
.RI "\fICopy constructor that is useful for base classes\&. Try to avoid this constructor, use move constructor\&. \fP"
.ti -1c
.RI "\fBRegistry\fP & \fBoperator=\fP (const \fBRegistry\fP &sr)"
.br
.RI "\fIAssignment operator that unregisters all the existing registeries and deeply copies each of repo element\&. \fP"
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBunregisterAll\fP (void) ELPP_FINAL"
.br
.RI "\fIUnregisters all the pointers from current repository\&. \fP"
.ti -1c
.RI "virtual void \fBregisterNew\fP (const T_Key &uniqKey, T_Ptr *ptr) ELPP_FINAL"
.br
.RI "\fIRegisters new registry to repository\&. \fP"
.ti -1c
.RI "void \fBunregister\fP (const T_Key &uniqKey)"
.br
.RI "\fIUnregisters single entry mapped to specified unique key\&. \fP"
.ti -1c
.RI "T_Ptr * \fBget\fP (const T_Key &uniqKey)"
.br
.RI "\fIGets pointer from repository\&. If none found, nullptr is returned\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T_Ptr, typename T_Key = const char*>
.br
class el::base::utils::Registry< T_Ptr, T_Key >"
A pointer registry mechanism to manage memory and provide search functionalities\&. (non-predicate version) 

NOTE: This is thread-unsafe implementation (although it contains lock function, it does not use these functions) of AbstractRegistry<T_Ptr, Container>\&. Any implementation of this class should be explicitly (by using lock functions) 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T_Ptr, typename T_Key = const char*> \fBRegistry\fP& \fBel::base::utils::Registry\fP< T_Ptr, T_Key >::operator= (const \fBRegistry\fP< T_Ptr, T_Key > & sr)\fC [inline]\fP"

.PP
Assignment operator that unregisters all the existing registeries and deeply copies each of repo element\&. 
.PP
\fBSee also:\fP
.RS 4
\fBunregisterAll()\fP 
.PP
deepCopy(const AbstractRegistry&) 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Jobify from the source code\&.
