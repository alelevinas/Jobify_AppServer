.TH "md_TecnicalDoc" 3 "Wed Dec 7 2016" "Version 1.0.0" "Jobify" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_TecnicalDoc \- TecnicalDoc 
#Documentacion Técnica 
.PP
 \fIProyecto:\fP Jobify AppServer \fIAuthor:\fP Grupo 3 \fICreated:\fP 30/11/2016 \fIVersion:\fP 1\&.0\&.0 
.PP
.PP
.SS "Table of Contents"
.PP
.IP "1." 4
Servidor HTML
.IP "2." 4
Bases de datos
.IP "3." 4
JSON
.IP "4." 4
LOG
.IP "5." 4
Protocolo de acceso
.IP "6." 4
Instalación 
.PP

.PP
.PP
.SS "1\&. Servidor HTTP"
.PP
Para montar el servidor se utilizó la libreria mongoose-cpp\&. \fCGithub\fP\&. La misma consiste en una encapsulación de mongoose de forma tal que para manejar los distintos endpoints se utilizan controladores\&. Los controladores son los que registran las rutas, el HTTP verb y el handler que actuará cuando un cliente le pega\&. Actualmente la aplicación consta de 3 controladores: 
.SS "\fBProfileController\fP"
.PP
Se utiliza para todo lo relacionado con alta, baja, modificación y actualización de perfiles de usuario\&. También para los servicios de agregar contacto, recomendar y búsquedas con filtros\&. 
.SS "\fBChatController\fP"
.PP
Se utiliza para el manejo de chats\&. Enviar, pedir una conversación o borrar un mensaje entre otras cosas\&. 
.SS "\fBSharedServerController\fP"
.PP
Se utiliza para entregar información antes consultada ante el SharedServer\&. Son skills, job_positions y categories\&.
.PP
.PP
 
.SS "2\&. Bases de datos"
.PP
Para el almacenado de la información se utilizó la librería leveldb\&. La misma es noSQL y almacena cualquier tipo de dato en una relación \fIclave-valor\fP Para manejarse con Json creamos la clase \fBDB\fP con métodos que reciben valores en JSON y parsean antes de devolver\&. Hay 4 bases de datos principales:
.PP
.IP "\(bu" 2
Users
.IP "\(bu" 2
Accounts
.IP "\(bu" 2
Sessions
.IP "\(bu" 2
Chats
.PP
.PP
.SS "Users"
.PP
Esta base de datos almacena todo el perfil del usuario en formato json\&. Un ejemplo de usuario es: 
.PP
.nf
1 {
2         "chats" : ["id1","id2"],
3         "contacts" : ["nuan@a\&.com", "nico@b\&.com"],
4         "coordenates" : "",
5         "dob" : "19/08/1993",
6         "email" : "ale\&.l@hotmail\&.com",
7         "firebase_token" : "ftpNLANtYrg:APA91bG1SMVr9u3DSsKV88XVxDjKnAzix3ZLHr1jiKvOIq1rF2LM9PZffhvAjkEAJxzxdWo_Tlq-oX2xSO0P5iQC30QnsxXjydYh4NwY3l5TRIcS8iiFUn51vhiAgRY6Zt82MKnXOH-V",
8         "gender" : "male",
9         "name" : "Alejandro Levinas",
10         "picture" : "",
11         "recommended_by" : ["leo@a\&.com", "pedro@a\&.com"],
12         "username" : "ale\&.l@hotmail\&.com"
13 }

.fi
.PP
 
.SS "Accounts"
.PP
La base de datos almacena usuarios y contraseñas\&. 
.SS "Sessions"
.PP
Almacena información de la sesión actual\&. Esto es, username y timestamp\&. La clave es el Token, que es una combinación de username, password y timestamp encryptados\&. Es el mismo token que se devuelve al cliente para acceder a la API\&. 
.SS "Chats"
.PP
Almacena los chats\&. Las claves son \fIusername1_username2\fP o \fIusername2_username1\fP\&. Contiene un array de mensajes en el que cada mensaje contiene el \fIusername\fP del emisor, el \fItimestamp\fP y el cuerpo del mensaje\&. 
.PP
 
.SS "3\&. JSON"
.PP
Para el manejo de JSON se utilizó la librería \fIjsoncpp\fP \fCGithub\fP
.PP
.PP
 
.SS "4\&. LOG"
.PP
El log se realizó mediante la librería \fIeasylogging++* \fCGithub\fP 
.PP
 
.SS "5\&. Protocolo de acceso"
\fP
.PP
\fI Para acceder a las funcionalidades principales del servidor hace falta estar autentificado\&. Al hacer */signup\fP, un cliente da de alta un usuario con un \fIusername\fP y una \fIpassword\fP\&. La respuesta a ese endpoint es un \fItoken\fP\&. Este \fItoken\fP tiene una duración y solo es válido mientras no expire\&. Para la utilización de la mayoriá de los endpoint hace falta incluir el \fItoken\fP en los headres HTTP\&. Es un header con clave \fCToken\fP y valor el \fItoken\fP recibido\&. Ej \fCToken: 55FCF21B40F8A9A1D56D95F302DA9045\fP
.PP
.SS "6\&. Instalación"
.PP
Hay 3 formas:
.IP "\(bu" 2
Compilando el código fuente
.IP "\(bu" 2
Instalando el paquete \fC\&.deb\fP en sistemas debian
.IP "\(bu" 2
Utilizando el \fCDockerfile\fP
.PP
.PP
.SS "Chats"
.PP
Primero hace falta descargar las librerías necesarias y luego el código fuente\&. Una vez descargados, hace falta ejecutar \fCcmake\fP para luego compilar con \fCmake JobifyAppserver\fP un script \fCyaml\fP de ejemplo se ve acontinuación: 
.PP
.nf
1 install:
2   - sudo pip install cpp-coveralls
3   - sudo apt-get install libsnappy-dev libleveldb-dev
4   #para jwtcpp
5   - sudo apt-get install libcrypto++9-dbg libcrypto++-dev
6   - sudo apt-get install libjansson4 libjansson-dev libjansson-dbg
7   - sudo apt-get install autoconf libtool
8   - git clone https://github\&.com/mrtazz/restclient-cpp\&.git
9   - cd restclient-cpp
10   - \&./autogen\&.sh
11   - \&./configure
12   - sudo make install
13   - export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
14   - cd \&.\&.
15 
16 script:
17   - mkdir build
18   - cd build
19   - cmake \&.\&.
20   - make JobifyAppserver
21   - \&./JobifyAppserver

.fi
.PP
.PP
.SS "Paquete \fC\&.deb\fP"
.PP
Una vez descargado el paquete debe ejecutar el siguiente comando: \fCsudo dpkg -i Jobify_AppServer-0\&.1\&.1-Linux\&.deb\fP
.PP
El ejecutable se instalará en \fC/home/usuario/local/bin\fP por lo que estará en el \fCPATH\fP y se podrá ejecutar en cualquier terminal\&. Las bases de datos se almacenarán en \fC/home/usuario/\&.Jobify_AppServer/bds\fP
.PP
.SS "Dockerfile"
.PP
Simplemente tener descargado Docker \fCinstall\fP Luego ubicarse en el mismo directorio del \fCDockerfile\fP y ejecutar el comando \fCdocker build \&.\fP 
