//
// Created by ale on 3/10/16.
//

#ifndef JOBIFY_APPSERVER_SESSIONSDB_H
#define JOBIFY_APPSERVER_SESSIONSDB_H


#include <leveldb/db.h>
#include <json/json.h>
#include "DB.h"


/**
 * For now, this DB will consist of a generated token and its username.
 * Only the active ones will be on the DB
 * {token: username}
 *
 * TODO: Add metadata and automatic logout (invalidate token) in a certain period of time
 * */
class SessionsDB: public DB {
public:
    virtual ~SessionsDB();

    SessionsDB(const std::string &db_name);

    /**
     * Adds a new session to the database. Key is @param token and value is @param session
     * @param token The token generated by the @class SessionManager
     * @param session the Json::Value containing session data
     * @return true if no database errors
     */
    bool add_session(const std::string &token, Json::Value session);

    /**
     * Gets the session data stored with key @param token
     * @param token The token generated by the @class SessionManager
     * @return true if no database errors. False if de data is corrupted
     * @throws KeyDoesntExistException
     */
    Json::Value get_session(const std::string &token);

    /**
     * Deletes the session from the db.
     * @param token of the session to delete
     * @return true if no database errors.
     */
    bool delete_session(const std::string &token);
};


#endif //JOBIFY_APPSERVER_SESSIONSDB_H
